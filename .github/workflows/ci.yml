name: CI

on:
  push:
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read

env:
  PACKAGE: asfsmd

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build package
        run: |
          python -m build
          python -m twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            dist/*.tar.gz
            dist/*.whl

  test:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} ${{ matrix.python-version }}
    needs: build
    strategy:
      matrix:
        python-version: ["3.8", "3.x"]  # aiohttp does not have wheels for 3.12
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # Only necessary if the test code is located outside the package
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Get distribution
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl

      - name: Install test dependencies
        shell: bash
        run: |
          python -m pip install pytest pytest-cov
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

      - name: Test
        run: |
          python -m pytest --cov=${PACKAGE} --cov-report=html --cov-report=term

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install lint dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pydocstyle isort black
          if [ -f requirements-lint.txt ]; then pip install -r requirements-lint.txt; fi

      - name: Lint (flake8)
        run: |
          python -m flake8 --count --show-source --statistics ${PACKAGE}

      - name: Lint (pydocstyle)
        run: |
          python -m pydocstyle --count ${PACKAGE}

      - name: Lint (isort)
        run: |
          python -m isort --check ${PACKAGE}

      - name: Lint (black)
        run: |
          python -m black --check ${PACKAGE}
